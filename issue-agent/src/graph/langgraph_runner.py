from langgraph.graph import StateGraph, END
from github import Github
import os
from typing import TypedDict, Optional, List, Any

from src.agents.reviewer_agent import get_reviewer_agent
from IPython.display import Image, display


class AgentState(TypedDict):
    input: str
    review_result: Optional[Any]
    decision: Optional[bool]
    issues_to_create: Optional[List[dict]]
    generation_result: Optional[Any]


def reviewer_node(llm, tools):
    agent = get_reviewer_agent(llm, tools)

    def run(state: AgentState) -> AgentState:
        print("🧠 Reviewer agent thinking...")
        result = agent.invoke({"input": state["input"]})

        create_issues = False
        issues = []
        print("****************ISSUES****************")
        print(issues)
        print("****************ISSUES****************")
        if isinstance(result, dict):
            create_issues = result.get("create_issues", False)
            issues = result.get("ISSUES", [])

        return {
            **state,
            "review_result": result,
            "decision": create_issues,
            "issues_to_create": issues,
        }

    return run


def generator_node():
    def run(state: AgentState) -> AgentState:
        print("⚙️ Generator creating issues...")
        gh = Github(os.environ["GITHUB_TOKEN"])
        repo = gh.get_repo(os.environ["GITHUB_REPO"])
        results = []

        label_name = "issue-agent"
        existing_labels = [label.name for label in repo.get_labels()]
        if label_name not in existing_labels:
            repo.create_label(name=label_name, color="f29513", description="Auto-generated by Issue Agent")

        for issue in state.get("issues_to_create", []):
            title = issue.get("title", "").strip() or "Untitled"
            body = issue.get("body", "").strip() or "No description provided."

            full_title = f"[Issue Agent] {title}"
            full_body = f"{body}\n\n---\n_This issue was generated automatically by `issue-agent`._"

            created = repo.create_issue(title=full_title, body=full_body, labels=[label_name])
            results.append(created.html_url)
            print(f"✅ Created issue: {full_title}")

        return {**state, "generation_result": results}

    return run


def should_create_issues(state: AgentState) -> str:
    return "create" if state.get("decision") else "end"


def build_multi_agent_issue_graph(llm, tools):
    graph = StateGraph(AgentState)

    graph.add_node("reviewer", reviewer_node(llm, tools))
    graph.add_node("generator", generator_node())

    graph.set_entry_point("reviewer")
    graph.add_conditional_edges("reviewer", should_create_issues, {
        "create": "generator",
        "end": END,
    })
    graph.add_edge("generator", END)

    # display(Image(graph.get_graph().draw_mermaid_png()))
    return graph.compile()
